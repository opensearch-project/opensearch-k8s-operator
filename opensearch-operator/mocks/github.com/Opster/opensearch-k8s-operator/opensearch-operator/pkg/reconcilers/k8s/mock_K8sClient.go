// Code generated by mockery v2.42.1. DO NOT EDIT.

package k8s

import (
	apiv1 "github.com/Opster/opensearch-k8s-operator/opensearch-operator/api/v1"
	appsv1 "k8s.io/api/apps/v1"

	batchv1 "k8s.io/api/batch/v1"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	reconciler "github.com/cisco-open/operator-tools/pkg/reconciler"

	runtime "k8s.io/apimachinery/pkg/runtime"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/api/core/v1"
)

// MockK8sClient is an autogenerated mock type for the K8sClient type
type MockK8sClient struct {
	mock.Mock
}

type MockK8sClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK8sClient) EXPECT() *MockK8sClient_Expecter {
	return &MockK8sClient_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with given fields:
func (_m *MockK8sClient) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockK8sClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockK8sClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockK8sClient_Expecter) Context() *MockK8sClient_Context_Call {
	return &MockK8sClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockK8sClient_Context_Call) Run(run func()) *MockK8sClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockK8sClient_Context_Call) Return(_a0 context.Context) *MockK8sClient_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_Context_Call) RunAndReturn(run func() context.Context) *MockK8sClient_Context_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConfigMap provides a mock function with given fields: cm
func (_m *MockK8sClient) CreateConfigMap(cm *v1.ConfigMap) (*reconcile.Result, error) {
	ret := _m.Called(cm)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigMap")
	}

	var r0 *reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.ConfigMap) (*reconcile.Result, error)); ok {
		return rf(cm)
	}
	if rf, ok := ret.Get(0).(func(*v1.ConfigMap) *reconcile.Result); ok {
		r0 = rf(cm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reconcile.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.ConfigMap) error); ok {
		r1 = rf(cm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_CreateConfigMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConfigMap'
type MockK8sClient_CreateConfigMap_Call struct {
	*mock.Call
}

// CreateConfigMap is a helper method to define mock.On call
//   - cm *v1.ConfigMap
func (_e *MockK8sClient_Expecter) CreateConfigMap(cm interface{}) *MockK8sClient_CreateConfigMap_Call {
	return &MockK8sClient_CreateConfigMap_Call{Call: _e.mock.On("CreateConfigMap", cm)}
}

func (_c *MockK8sClient_CreateConfigMap_Call) Run(run func(cm *v1.ConfigMap)) *MockK8sClient_CreateConfigMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.ConfigMap))
	})
	return _c
}

func (_c *MockK8sClient_CreateConfigMap_Call) Return(_a0 *reconcile.Result, _a1 error) *MockK8sClient_CreateConfigMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_CreateConfigMap_Call) RunAndReturn(run func(*v1.ConfigMap) (*reconcile.Result, error)) *MockK8sClient_CreateConfigMap_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeployment provides a mock function with given fields: deployment
func (_m *MockK8sClient) CreateDeployment(deployment *appsv1.Deployment) (*reconcile.Result, error) {
	ret := _m.Called(deployment)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*appsv1.Deployment) (*reconcile.Result, error)); ok {
		return rf(deployment)
	}
	if rf, ok := ret.Get(0).(func(*appsv1.Deployment) *reconcile.Result); ok {
		r0 = rf(deployment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reconcile.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*appsv1.Deployment) error); ok {
		r1 = rf(deployment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_CreateDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeployment'
type MockK8sClient_CreateDeployment_Call struct {
	*mock.Call
}

// CreateDeployment is a helper method to define mock.On call
//   - deployment *appsv1.Deployment
func (_e *MockK8sClient_Expecter) CreateDeployment(deployment interface{}) *MockK8sClient_CreateDeployment_Call {
	return &MockK8sClient_CreateDeployment_Call{Call: _e.mock.On("CreateDeployment", deployment)}
}

func (_c *MockK8sClient_CreateDeployment_Call) Run(run func(deployment *appsv1.Deployment)) *MockK8sClient_CreateDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*appsv1.Deployment))
	})
	return _c
}

func (_c *MockK8sClient_CreateDeployment_Call) Return(_a0 *reconcile.Result, _a1 error) *MockK8sClient_CreateDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_CreateDeployment_Call) RunAndReturn(run func(*appsv1.Deployment) (*reconcile.Result, error)) *MockK8sClient_CreateDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJob provides a mock function with given fields: job
func (_m *MockK8sClient) CreateJob(job *batchv1.Job) (*reconcile.Result, error) {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*batchv1.Job) (*reconcile.Result, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(*batchv1.Job) *reconcile.Result); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reconcile.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*batchv1.Job) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockK8sClient_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - job *batchv1.Job
func (_e *MockK8sClient_Expecter) CreateJob(job interface{}) *MockK8sClient_CreateJob_Call {
	return &MockK8sClient_CreateJob_Call{Call: _e.mock.On("CreateJob", job)}
}

func (_c *MockK8sClient_CreateJob_Call) Run(run func(job *batchv1.Job)) *MockK8sClient_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*batchv1.Job))
	})
	return _c
}

func (_c *MockK8sClient_CreateJob_Call) Return(_a0 *reconcile.Result, _a1 error) *MockK8sClient_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_CreateJob_Call) RunAndReturn(run func(*batchv1.Job) (*reconcile.Result, error)) *MockK8sClient_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecret provides a mock function with given fields: secret
func (_m *MockK8sClient) CreateSecret(secret *v1.Secret) (*reconcile.Result, error) {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 *reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Secret) (*reconcile.Result, error)); ok {
		return rf(secret)
	}
	if rf, ok := ret.Get(0).(func(*v1.Secret) *reconcile.Result); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reconcile.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_CreateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecret'
type MockK8sClient_CreateSecret_Call struct {
	*mock.Call
}

// CreateSecret is a helper method to define mock.On call
//   - secret *v1.Secret
func (_e *MockK8sClient_Expecter) CreateSecret(secret interface{}) *MockK8sClient_CreateSecret_Call {
	return &MockK8sClient_CreateSecret_Call{Call: _e.mock.On("CreateSecret", secret)}
}

func (_c *MockK8sClient_CreateSecret_Call) Run(run func(secret *v1.Secret)) *MockK8sClient_CreateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Secret))
	})
	return _c
}

func (_c *MockK8sClient_CreateSecret_Call) Return(_a0 *reconcile.Result, _a1 error) *MockK8sClient_CreateSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_CreateSecret_Call) RunAndReturn(run func(*v1.Secret) (*reconcile.Result, error)) *MockK8sClient_CreateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: svc
func (_m *MockK8sClient) CreateService(svc *v1.Service) (*reconcile.Result, error) {
	ret := _m.Called(svc)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Service) (*reconcile.Result, error)); ok {
		return rf(svc)
	}
	if rf, ok := ret.Get(0).(func(*v1.Service) *reconcile.Result); ok {
		r0 = rf(svc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reconcile.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Service) error); ok {
		r1 = rf(svc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockK8sClient_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - svc *v1.Service
func (_e *MockK8sClient_Expecter) CreateService(svc interface{}) *MockK8sClient_CreateService_Call {
	return &MockK8sClient_CreateService_Call{Call: _e.mock.On("CreateService", svc)}
}

func (_c *MockK8sClient_CreateService_Call) Run(run func(svc *v1.Service)) *MockK8sClient_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Service))
	})
	return _c
}

func (_c *MockK8sClient_CreateService_Call) Return(_a0 *reconcile.Result, _a1 error) *MockK8sClient_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_CreateService_Call) RunAndReturn(run func(*v1.Service) (*reconcile.Result, error)) *MockK8sClient_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeployment provides a mock function with given fields: deployment, orphan
func (_m *MockK8sClient) DeleteDeployment(deployment *appsv1.Deployment, orphan bool) error {
	ret := _m.Called(deployment, orphan)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*appsv1.Deployment, bool) error); ok {
		r0 = rf(deployment, orphan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClient_DeleteDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeployment'
type MockK8sClient_DeleteDeployment_Call struct {
	*mock.Call
}

// DeleteDeployment is a helper method to define mock.On call
//   - deployment *appsv1.Deployment
//   - orphan bool
func (_e *MockK8sClient_Expecter) DeleteDeployment(deployment interface{}, orphan interface{}) *MockK8sClient_DeleteDeployment_Call {
	return &MockK8sClient_DeleteDeployment_Call{Call: _e.mock.On("DeleteDeployment", deployment, orphan)}
}

func (_c *MockK8sClient_DeleteDeployment_Call) Run(run func(deployment *appsv1.Deployment, orphan bool)) *MockK8sClient_DeleteDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*appsv1.Deployment), args[1].(bool))
	})
	return _c
}

func (_c *MockK8sClient_DeleteDeployment_Call) Return(_a0 error) *MockK8sClient_DeleteDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_DeleteDeployment_Call) RunAndReturn(run func(*appsv1.Deployment, bool) error) *MockK8sClient_DeleteDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function with given fields: job
func (_m *MockK8sClient) DeleteJob(job *batchv1.Job) error {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*batchv1.Job) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClient_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockK8sClient_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - job *batchv1.Job
func (_e *MockK8sClient_Expecter) DeleteJob(job interface{}) *MockK8sClient_DeleteJob_Call {
	return &MockK8sClient_DeleteJob_Call{Call: _e.mock.On("DeleteJob", job)}
}

func (_c *MockK8sClient_DeleteJob_Call) Run(run func(job *batchv1.Job)) *MockK8sClient_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*batchv1.Job))
	})
	return _c
}

func (_c *MockK8sClient_DeleteJob_Call) Return(_a0 error) *MockK8sClient_DeleteJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_DeleteJob_Call) RunAndReturn(run func(*batchv1.Job) error) *MockK8sClient_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePod provides a mock function with given fields: pod
func (_m *MockK8sClient) DeletePod(pod *v1.Pod) error {
	ret := _m.Called(pod)

	if len(ret) == 0 {
		panic("no return value specified for DeletePod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Pod) error); ok {
		r0 = rf(pod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClient_DeletePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePod'
type MockK8sClient_DeletePod_Call struct {
	*mock.Call
}

// DeletePod is a helper method to define mock.On call
//   - pod *v1.Pod
func (_e *MockK8sClient_Expecter) DeletePod(pod interface{}) *MockK8sClient_DeletePod_Call {
	return &MockK8sClient_DeletePod_Call{Call: _e.mock.On("DeletePod", pod)}
}

func (_c *MockK8sClient_DeletePod_Call) Run(run func(pod *v1.Pod)) *MockK8sClient_DeletePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Pod))
	})
	return _c
}

func (_c *MockK8sClient_DeletePod_Call) Return(_a0 error) *MockK8sClient_DeletePod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_DeletePod_Call) RunAndReturn(run func(*v1.Pod) error) *MockK8sClient_DeletePod_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStatefulSet provides a mock function with given fields: sts, orphan
func (_m *MockK8sClient) DeleteStatefulSet(sts *appsv1.StatefulSet, orphan bool) error {
	ret := _m.Called(sts, orphan)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStatefulSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*appsv1.StatefulSet, bool) error); ok {
		r0 = rf(sts, orphan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClient_DeleteStatefulSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStatefulSet'
type MockK8sClient_DeleteStatefulSet_Call struct {
	*mock.Call
}

// DeleteStatefulSet is a helper method to define mock.On call
//   - sts *appsv1.StatefulSet
//   - orphan bool
func (_e *MockK8sClient_Expecter) DeleteStatefulSet(sts interface{}, orphan interface{}) *MockK8sClient_DeleteStatefulSet_Call {
	return &MockK8sClient_DeleteStatefulSet_Call{Call: _e.mock.On("DeleteStatefulSet", sts, orphan)}
}

func (_c *MockK8sClient_DeleteStatefulSet_Call) Run(run func(sts *appsv1.StatefulSet, orphan bool)) *MockK8sClient_DeleteStatefulSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*appsv1.StatefulSet), args[1].(bool))
	})
	return _c
}

func (_c *MockK8sClient_DeleteStatefulSet_Call) Return(_a0 error) *MockK8sClient_DeleteStatefulSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_DeleteStatefulSet_Call) RunAndReturn(run func(*appsv1.StatefulSet, bool) error) *MockK8sClient_DeleteStatefulSet_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigMap provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetConfigMap(name string, namespace string) (v1.ConfigMap, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigMap")
	}

	var r0 v1.ConfigMap
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (v1.ConfigMap, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) v1.ConfigMap); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(v1.ConfigMap)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetConfigMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigMap'
type MockK8sClient_GetConfigMap_Call struct {
	*mock.Call
}

// GetConfigMap is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetConfigMap(name interface{}, namespace interface{}) *MockK8sClient_GetConfigMap_Call {
	return &MockK8sClient_GetConfigMap_Call{Call: _e.mock.On("GetConfigMap", name, namespace)}
}

func (_c *MockK8sClient_GetConfigMap_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetConfigMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetConfigMap_Call) Return(_a0 v1.ConfigMap, _a1 error) *MockK8sClient_GetConfigMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetConfigMap_Call) RunAndReturn(run func(string, string) (v1.ConfigMap, error)) *MockK8sClient_GetConfigMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployment provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetDeployment(name string, namespace string) (appsv1.Deployment, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 appsv1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (appsv1.Deployment, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) appsv1.Deployment); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(appsv1.Deployment)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployment'
type MockK8sClient_GetDeployment_Call struct {
	*mock.Call
}

// GetDeployment is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetDeployment(name interface{}, namespace interface{}) *MockK8sClient_GetDeployment_Call {
	return &MockK8sClient_GetDeployment_Call{Call: _e.mock.On("GetDeployment", name, namespace)}
}

func (_c *MockK8sClient_GetDeployment_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetDeployment_Call) Return(_a0 appsv1.Deployment, _a1 error) *MockK8sClient_GetDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetDeployment_Call) RunAndReturn(run func(string, string) (appsv1.Deployment, error)) *MockK8sClient_GetDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetJob(name string, namespace string) (batchv1.Job, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 batchv1.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (batchv1.Job, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) batchv1.Job); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(batchv1.Job)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockK8sClient_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetJob(name interface{}, namespace interface{}) *MockK8sClient_GetJob_Call {
	return &MockK8sClient_GetJob_Call{Call: _e.mock.On("GetJob", name, namespace)}
}

func (_c *MockK8sClient_GetJob_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetJob_Call) Return(_a0 batchv1.Job, _a1 error) *MockK8sClient_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetJob_Call) RunAndReturn(run func(string, string) (batchv1.Job, error)) *MockK8sClient_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenSearchCluster provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetOpenSearchCluster(name string, namespace string) (apiv1.OpenSearchCluster, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenSearchCluster")
	}

	var r0 apiv1.OpenSearchCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (apiv1.OpenSearchCluster, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) apiv1.OpenSearchCluster); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(apiv1.OpenSearchCluster)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetOpenSearchCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenSearchCluster'
type MockK8sClient_GetOpenSearchCluster_Call struct {
	*mock.Call
}

// GetOpenSearchCluster is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetOpenSearchCluster(name interface{}, namespace interface{}) *MockK8sClient_GetOpenSearchCluster_Call {
	return &MockK8sClient_GetOpenSearchCluster_Call{Call: _e.mock.On("GetOpenSearchCluster", name, namespace)}
}

func (_c *MockK8sClient_GetOpenSearchCluster_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetOpenSearchCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetOpenSearchCluster_Call) Return(_a0 apiv1.OpenSearchCluster, _a1 error) *MockK8sClient_GetOpenSearchCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetOpenSearchCluster_Call) RunAndReturn(run func(string, string) (apiv1.OpenSearchCluster, error)) *MockK8sClient_GetOpenSearchCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetPVC provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetPVC(name string, namespace string) (v1.PersistentVolumeClaim, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetPVC")
	}

	var r0 v1.PersistentVolumeClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (v1.PersistentVolumeClaim, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) v1.PersistentVolumeClaim); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(v1.PersistentVolumeClaim)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetPVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPVC'
type MockK8sClient_GetPVC_Call struct {
	*mock.Call
}

// GetPVC is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetPVC(name interface{}, namespace interface{}) *MockK8sClient_GetPVC_Call {
	return &MockK8sClient_GetPVC_Call{Call: _e.mock.On("GetPVC", name, namespace)}
}

func (_c *MockK8sClient_GetPVC_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetPVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetPVC_Call) Return(_a0 v1.PersistentVolumeClaim, _a1 error) *MockK8sClient_GetPVC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetPVC_Call) RunAndReturn(run func(string, string) (v1.PersistentVolumeClaim, error)) *MockK8sClient_GetPVC_Call {
	_c.Call.Return(run)
	return _c
}

// GetPod provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetPod(name string, namespace string) (v1.Pod, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetPod")
	}

	var r0 v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (v1.Pod, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) v1.Pod); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(v1.Pod)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPod'
type MockK8sClient_GetPod_Call struct {
	*mock.Call
}

// GetPod is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetPod(name interface{}, namespace interface{}) *MockK8sClient_GetPod_Call {
	return &MockK8sClient_GetPod_Call{Call: _e.mock.On("GetPod", name, namespace)}
}

func (_c *MockK8sClient_GetPod_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetPod_Call) Return(_a0 v1.Pod, _a1 error) *MockK8sClient_GetPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetPod_Call) RunAndReturn(run func(string, string) (v1.Pod, error)) *MockK8sClient_GetPod_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetSecret(name string, namespace string) (v1.Secret, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (v1.Secret, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) v1.Secret); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(v1.Secret)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type MockK8sClient_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetSecret(name interface{}, namespace interface{}) *MockK8sClient_GetSecret_Call {
	return &MockK8sClient_GetSecret_Call{Call: _e.mock.On("GetSecret", name, namespace)}
}

func (_c *MockK8sClient_GetSecret_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetSecret_Call) Return(_a0 v1.Secret, _a1 error) *MockK8sClient_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetSecret_Call) RunAndReturn(run func(string, string) (v1.Secret, error)) *MockK8sClient_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetService(name string, namespace string) (v1.Service, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 v1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (v1.Service, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) v1.Service); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(v1.Service)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockK8sClient_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetService(name interface{}, namespace interface{}) *MockK8sClient_GetService_Call {
	return &MockK8sClient_GetService_Call{Call: _e.mock.On("GetService", name, namespace)}
}

func (_c *MockK8sClient_GetService_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetService_Call) Return(_a0 v1.Service, _a1 error) *MockK8sClient_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetService_Call) RunAndReturn(run func(string, string) (v1.Service, error)) *MockK8sClient_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatefulSet provides a mock function with given fields: name, namespace
func (_m *MockK8sClient) GetStatefulSet(name string, namespace string) (appsv1.StatefulSet, error) {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetStatefulSet")
	}

	var r0 appsv1.StatefulSet
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (appsv1.StatefulSet, error)); ok {
		return rf(name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string) appsv1.StatefulSet); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(appsv1.StatefulSet)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_GetStatefulSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatefulSet'
type MockK8sClient_GetStatefulSet_Call struct {
	*mock.Call
}

// GetStatefulSet is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *MockK8sClient_Expecter) GetStatefulSet(name interface{}, namespace interface{}) *MockK8sClient_GetStatefulSet_Call {
	return &MockK8sClient_GetStatefulSet_Call{Call: _e.mock.On("GetStatefulSet", name, namespace)}
}

func (_c *MockK8sClient_GetStatefulSet_Call) Run(run func(name string, namespace string)) *MockK8sClient_GetStatefulSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockK8sClient_GetStatefulSet_Call) Return(_a0 appsv1.StatefulSet, _a1 error) *MockK8sClient_GetStatefulSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_GetStatefulSet_Call) RunAndReturn(run func(string, string) (appsv1.StatefulSet, error)) *MockK8sClient_GetStatefulSet_Call {
	_c.Call.Return(run)
	return _c
}

// ListPVCs provides a mock function with given fields: listOptions
func (_m *MockK8sClient) ListPVCs(listOptions *client.ListOptions) (v1.PersistentVolumeClaimList, error) {
	ret := _m.Called(listOptions)

	if len(ret) == 0 {
		panic("no return value specified for ListPVCs")
	}

	var r0 v1.PersistentVolumeClaimList
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.ListOptions) (v1.PersistentVolumeClaimList, error)); ok {
		return rf(listOptions)
	}
	if rf, ok := ret.Get(0).(func(*client.ListOptions) v1.PersistentVolumeClaimList); ok {
		r0 = rf(listOptions)
	} else {
		r0 = ret.Get(0).(v1.PersistentVolumeClaimList)
	}

	if rf, ok := ret.Get(1).(func(*client.ListOptions) error); ok {
		r1 = rf(listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_ListPVCs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPVCs'
type MockK8sClient_ListPVCs_Call struct {
	*mock.Call
}

// ListPVCs is a helper method to define mock.On call
//   - listOptions *client.ListOptions
func (_e *MockK8sClient_Expecter) ListPVCs(listOptions interface{}) *MockK8sClient_ListPVCs_Call {
	return &MockK8sClient_ListPVCs_Call{Call: _e.mock.On("ListPVCs", listOptions)}
}

func (_c *MockK8sClient_ListPVCs_Call) Run(run func(listOptions *client.ListOptions)) *MockK8sClient_ListPVCs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.ListOptions))
	})
	return _c
}

func (_c *MockK8sClient_ListPVCs_Call) Return(_a0 v1.PersistentVolumeClaimList, _a1 error) *MockK8sClient_ListPVCs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_ListPVCs_Call) RunAndReturn(run func(*client.ListOptions) (v1.PersistentVolumeClaimList, error)) *MockK8sClient_ListPVCs_Call {
	_c.Call.Return(run)
	return _c
}

// ListPods provides a mock function with given fields: listOptions
func (_m *MockK8sClient) ListPods(listOptions *client.ListOptions) (v1.PodList, error) {
	ret := _m.Called(listOptions)

	if len(ret) == 0 {
		panic("no return value specified for ListPods")
	}

	var r0 v1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.ListOptions) (v1.PodList, error)); ok {
		return rf(listOptions)
	}
	if rf, ok := ret.Get(0).(func(*client.ListOptions) v1.PodList); ok {
		r0 = rf(listOptions)
	} else {
		r0 = ret.Get(0).(v1.PodList)
	}

	if rf, ok := ret.Get(1).(func(*client.ListOptions) error); ok {
		r1 = rf(listOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_ListPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPods'
type MockK8sClient_ListPods_Call struct {
	*mock.Call
}

// ListPods is a helper method to define mock.On call
//   - listOptions *client.ListOptions
func (_e *MockK8sClient_Expecter) ListPods(listOptions interface{}) *MockK8sClient_ListPods_Call {
	return &MockK8sClient_ListPods_Call{Call: _e.mock.On("ListPods", listOptions)}
}

func (_c *MockK8sClient_ListPods_Call) Run(run func(listOptions *client.ListOptions)) *MockK8sClient_ListPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.ListOptions))
	})
	return _c
}

func (_c *MockK8sClient_ListPods_Call) Return(_a0 v1.PodList, _a1 error) *MockK8sClient_ListPods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_ListPods_Call) RunAndReturn(run func(*client.ListOptions) (v1.PodList, error)) *MockK8sClient_ListPods_Call {
	_c.Call.Return(run)
	return _c
}

// ListStatefulSets provides a mock function with given fields: listOptions
func (_m *MockK8sClient) ListStatefulSets(listOptions ...client.ListOption) (appsv1.StatefulSetList, error) {
	_va := make([]interface{}, len(listOptions))
	for _i := range listOptions {
		_va[_i] = listOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStatefulSets")
	}

	var r0 appsv1.StatefulSetList
	var r1 error
	if rf, ok := ret.Get(0).(func(...client.ListOption) (appsv1.StatefulSetList, error)); ok {
		return rf(listOptions...)
	}
	if rf, ok := ret.Get(0).(func(...client.ListOption) appsv1.StatefulSetList); ok {
		r0 = rf(listOptions...)
	} else {
		r0 = ret.Get(0).(appsv1.StatefulSetList)
	}

	if rf, ok := ret.Get(1).(func(...client.ListOption) error); ok {
		r1 = rf(listOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_ListStatefulSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStatefulSets'
type MockK8sClient_ListStatefulSets_Call struct {
	*mock.Call
}

// ListStatefulSets is a helper method to define mock.On call
//   - listOptions ...client.ListOption
func (_e *MockK8sClient_Expecter) ListStatefulSets(listOptions ...interface{}) *MockK8sClient_ListStatefulSets_Call {
	return &MockK8sClient_ListStatefulSets_Call{Call: _e.mock.On("ListStatefulSets",
		append([]interface{}{}, listOptions...)...)}
}

func (_c *MockK8sClient_ListStatefulSets_Call) Run(run func(listOptions ...client.ListOption)) *MockK8sClient_ListStatefulSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.ListOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(client.ListOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockK8sClient_ListStatefulSets_Call) Return(_a0 appsv1.StatefulSetList, _a1 error) *MockK8sClient_ListStatefulSets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_ListStatefulSets_Call) RunAndReturn(run func(...client.ListOption) (appsv1.StatefulSetList, error)) *MockK8sClient_ListStatefulSets_Call {
	_c.Call.Return(run)
	return _c
}

// ReconcileResource provides a mock function with given fields: _a0, _a1
func (_m *MockK8sClient) ReconcileResource(_a0 runtime.Object, _a1 reconciler.DesiredState) (*reconcile.Result, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ReconcileResource")
	}

	var r0 *reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(runtime.Object, reconciler.DesiredState) (*reconcile.Result, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(runtime.Object, reconciler.DesiredState) *reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reconcile.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(runtime.Object, reconciler.DesiredState) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sClient_ReconcileResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReconcileResource'
type MockK8sClient_ReconcileResource_Call struct {
	*mock.Call
}

// ReconcileResource is a helper method to define mock.On call
//   - _a0 runtime.Object
//   - _a1 reconciler.DesiredState
func (_e *MockK8sClient_Expecter) ReconcileResource(_a0 interface{}, _a1 interface{}) *MockK8sClient_ReconcileResource_Call {
	return &MockK8sClient_ReconcileResource_Call{Call: _e.mock.On("ReconcileResource", _a0, _a1)}
}

func (_c *MockK8sClient_ReconcileResource_Call) Run(run func(_a0 runtime.Object, _a1 reconciler.DesiredState)) *MockK8sClient_ReconcileResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.Object), args[1].(reconciler.DesiredState))
	})
	return _c
}

func (_c *MockK8sClient_ReconcileResource_Call) Return(_a0 *reconcile.Result, _a1 error) *MockK8sClient_ReconcileResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sClient_ReconcileResource_Call) RunAndReturn(run func(runtime.Object, reconciler.DesiredState) (*reconcile.Result, error)) *MockK8sClient_ReconcileResource_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function with given fields:
func (_m *MockK8sClient) Scheme() *runtime.Scheme {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 *runtime.Scheme
	if rf, ok := ret.Get(0).(func() *runtime.Scheme); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Scheme)
		}
	}

	return r0
}

// MockK8sClient_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type MockK8sClient_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *MockK8sClient_Expecter) Scheme() *MockK8sClient_Scheme_Call {
	return &MockK8sClient_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *MockK8sClient_Scheme_Call) Run(run func()) *MockK8sClient_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockK8sClient_Scheme_Call) Return(_a0 *runtime.Scheme) *MockK8sClient_Scheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_Scheme_Call) RunAndReturn(run func() *runtime.Scheme) *MockK8sClient_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// UdateObjectStatus provides a mock function with given fields: instance, f
func (_m *MockK8sClient) UdateObjectStatus(instance client.Object, f func(client.Object)) error {
	ret := _m.Called(instance, f)

	if len(ret) == 0 {
		panic("no return value specified for UdateObjectStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(client.Object, func(client.Object)) error); ok {
		r0 = rf(instance, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClient_UdateObjectStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UdateObjectStatus'
type MockK8sClient_UdateObjectStatus_Call struct {
	*mock.Call
}

// UdateObjectStatus is a helper method to define mock.On call
//   - instance client.Object
//   - f func(client.Object)
func (_e *MockK8sClient_Expecter) UdateObjectStatus(instance interface{}, f interface{}) *MockK8sClient_UdateObjectStatus_Call {
	return &MockK8sClient_UdateObjectStatus_Call{Call: _e.mock.On("UdateObjectStatus", instance, f)}
}

func (_c *MockK8sClient_UdateObjectStatus_Call) Run(run func(instance client.Object, f func(client.Object))) *MockK8sClient_UdateObjectStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Object), args[1].(func(client.Object)))
	})
	return _c
}

func (_c *MockK8sClient_UdateObjectStatus_Call) Return(_a0 error) *MockK8sClient_UdateObjectStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_UdateObjectStatus_Call) RunAndReturn(run func(client.Object, func(client.Object)) error) *MockK8sClient_UdateObjectStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOpenSearchClusterStatus provides a mock function with given fields: key, f
func (_m *MockK8sClient) UpdateOpenSearchClusterStatus(key types.NamespacedName, f func(*apiv1.OpenSearchCluster)) error {
	ret := _m.Called(key, f)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOpenSearchClusterStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.NamespacedName, func(*apiv1.OpenSearchCluster)) error); ok {
		r0 = rf(key, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClient_UpdateOpenSearchClusterStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOpenSearchClusterStatus'
type MockK8sClient_UpdateOpenSearchClusterStatus_Call struct {
	*mock.Call
}

// UpdateOpenSearchClusterStatus is a helper method to define mock.On call
//   - key types.NamespacedName
//   - f func(*apiv1.OpenSearchCluster)
func (_e *MockK8sClient_Expecter) UpdateOpenSearchClusterStatus(key interface{}, f interface{}) *MockK8sClient_UpdateOpenSearchClusterStatus_Call {
	return &MockK8sClient_UpdateOpenSearchClusterStatus_Call{Call: _e.mock.On("UpdateOpenSearchClusterStatus", key, f)}
}

func (_c *MockK8sClient_UpdateOpenSearchClusterStatus_Call) Run(run func(key types.NamespacedName, f func(*apiv1.OpenSearchCluster))) *MockK8sClient_UpdateOpenSearchClusterStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.NamespacedName), args[1].(func(*apiv1.OpenSearchCluster)))
	})
	return _c
}

func (_c *MockK8sClient_UpdateOpenSearchClusterStatus_Call) Return(_a0 error) *MockK8sClient_UpdateOpenSearchClusterStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_UpdateOpenSearchClusterStatus_Call) RunAndReturn(run func(types.NamespacedName, func(*apiv1.OpenSearchCluster)) error) *MockK8sClient_UpdateOpenSearchClusterStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePVC provides a mock function with given fields: pvc
func (_m *MockK8sClient) UpdatePVC(pvc *v1.PersistentVolumeClaim) error {
	ret := _m.Called(pvc)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePVC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.PersistentVolumeClaim) error); ok {
		r0 = rf(pvc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sClient_UpdatePVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePVC'
type MockK8sClient_UpdatePVC_Call struct {
	*mock.Call
}

// UpdatePVC is a helper method to define mock.On call
//   - pvc *v1.PersistentVolumeClaim
func (_e *MockK8sClient_Expecter) UpdatePVC(pvc interface{}) *MockK8sClient_UpdatePVC_Call {
	return &MockK8sClient_UpdatePVC_Call{Call: _e.mock.On("UpdatePVC", pvc)}
}

func (_c *MockK8sClient_UpdatePVC_Call) Run(run func(pvc *v1.PersistentVolumeClaim)) *MockK8sClient_UpdatePVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.PersistentVolumeClaim))
	})
	return _c
}

func (_c *MockK8sClient_UpdatePVC_Call) Return(_a0 error) *MockK8sClient_UpdatePVC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sClient_UpdatePVC_Call) RunAndReturn(run func(*v1.PersistentVolumeClaim) error) *MockK8sClient_UpdatePVC_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockK8sClient creates a new instance of MockK8sClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockK8sClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockK8sClient {
	mock := &MockK8sClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
