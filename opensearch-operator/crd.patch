diff --git a/opensearch-operator/pkg/reconcilers/suite_test.go b/opensearch-operator/pkg/reconcilers/suite_test.go
index c7e3f1a..a0a4a6a 100644
--- a/opensearch-operator/pkg/reconcilers/suite_test.go
+++ b/opensearch-operator/pkg/reconcilers/suite_test.go
@@ -34,11 +34,14 @@ import (
 
 	ctrl "sigs.k8s.io/controller-runtime"
 
+	"github.com/banzaicloud/operator-tools/pkg/prometheus"
 	. "github.com/onsi/ginkgo"
 	. "github.com/onsi/gomega"
 	corev1 "k8s.io/api/core/v1"
+	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/client-go/kubernetes/scheme"
+	"k8s.io/utils/pointer"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/envtest"
 	"sigs.k8s.io/controller-runtime/pkg/envtest/printer"
@@ -79,9 +82,39 @@ var _ = BeforeSuite(func() {
 	Expect(err).NotTo(HaveOccurred())
 	//logf.SetLogger(zap.LoggerTo(GinkgoWriter, true))
 
+	serviceMonitorCRD := apiextensionsv1.CustomResourceDefinition{
+		ObjectMeta: metav1.ObjectMeta{
+			Name: prometheus.ServiceMonitorName + "." + prometheus.GroupVersion.Group,
+		},
+		Spec: apiextensionsv1.CustomResourceDefinitionSpec{
+			Group: prometheus.GroupVersion.Group,
+			Scope: apiextensionsv1.NamespaceScoped,
+			Names: apiextensionsv1.CustomResourceDefinitionNames{
+				Plural:   prometheus.ServiceMonitorName,
+				Singular: prometheus.ServiceMonitorKindKey,
+				Kind:     prometheus.ServiceMonitorsKind,
+			},
+			Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
+				{
+					Name:    prometheus.GroupVersion.Version,
+					Storage: true,
+					Served:  true,
+					Schema: &apiextensionsv1.CustomResourceValidation{
+						OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
+							Properties:             map[string]apiextensionsv1.JSONSchemaProps{},
+							XPreserveUnknownFields: pointer.BoolPtr(true),
+							Type:                   "object",
+						},
+					},
+				},
+			},
+		},
+	}
+
 	ctx := context.Background()
 	By("bootstrapping test environment")
 	testEnv = &envtest.Environment{
+		CRDs:                  []*apiextensionsv1.CustomResourceDefinition{&serviceMonitorCRD},
 		CRDDirectoryPaths:     []string{filepath.Join("..", "..", "config", "crd", "bases")},
 		ErrorIfCRDPathMissing: true,
 	}
@@ -98,6 +131,8 @@ var _ = BeforeSuite(func() {
 	Expect(err).NotTo(HaveOccurred())
 	err = opsterv1.AddToScheme(scheme.Scheme)
 	Expect(err).NotTo(HaveOccurred())
+	err = prometheus.AddToScheme(scheme.Scheme)
+	Expect(err).NotTo(HaveOccurred())
 
 	k8sClient, err = client.New(cfg, client.Options{Scheme: scheme.Scheme})
 	Expect(err).NotTo(HaveOccurred())
