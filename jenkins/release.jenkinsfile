lib = library(identifier: 'jenkins@6.1.1', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 30, unit: 'MINUTES')
        throttleJobProperty(
            categories: [],
            limitOneJobWithMatchingParams: false,
            maxConcurrentPerNode: 0,
            maxConcurrentTotal: 1,
            paramsToUseForLimit: '',
            throttleEnabled: true,
            throttleOption: 'project',
        )
    }
    agent {
        docker {
            label 'Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:ci-runner-centos7-opensearch-build-v3'
            args '-e JAVA_HOME=/opt/java/openjdk-11'
            alwaysPull true
        }
    }
    parameters {
        string(
            name: 'GIT_REFERENCE',
            description: 'Git branch, tag, commitid for reference to checkout commit of OpenSearch core before running the gradle check.',
            defaultValue: 'main',
            trim: true
        )
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'isTag', value: '$.ref_type'],
            ],
            tokenCredentialId: 'jenkins-opensearch-operator-generic-webhook-token',
            causeString: 'A commit was pushed on opensearch-project/opensearch-k8s-operator repository main branch causing this workflow to run',
            printContributedVariables: false,
            printPostContent: false,
        )
    }
    environment {
        REPO_URL="https://github.com/opensearch-project/opensearch-k8s-operator"
        USER_BUILD_CAUSE = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
        TIMER_BUILD_CAUSE = currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause')
    }
    stages {
        stage('OpenSearch Operator') {
            steps {
                script {
                    def ref_final = "${GIT_REFERENCE}"
                    def ref_url = "${REPO_URL}/commit/${GIT_REFERENCE}"
                    if (env.USER_BUILD_CAUSE.equals('[]') && env.TIMER_BUILD_CAUSE.equals('[]')) {
                        ref_final = "${ref}"
                        ref_url = "${REPO_URL}/releases/tag/${ref}"
                        println("Triggered by GitHub: ${ref_url}")

                        currentBuild.description = """GitHub: <a href="${ref_url}">${ref_url}</a>"""
                    }
                    else {
                        println("Triggered by User/Timer: ${ref_url}")
                        currentBuild.description = """User/Timer: <a href="${ref_url}">${ref_url}</a>"""
                    }

                    if (ref_final == null || ref_final == '') {
                        currentBuild.result = 'ABORTED'
                        error("Missing git tag reference.")
                    }

                    echo("Git checkout ${REPO_URL} on ${ref_final} for opensearch-operator-busybox release")
                    checkout scm
                    sh("git checkout ${ref_final}")

                    def OPERATOR_PRODUCT = "opensearch-operator"
                    def OPERATOR_VERSION = ref_final.substring(1);

                    echo("${OPERATOR_PRODUCT}: ${OPERATOR_VERSION}")

                    dockerBuild: {
                        build job: 'docker-build',
                        parameters: [
                            string(name: 'DOCKER_BUILD_GIT_REPOSITORY', value: "${REPO_URL}"),
                            string(name: 'DOCKER_BUILD_GIT_REPOSITORY_REFERENCE', value: "${ref_final}"),
                            string(name: 'DOCKER_BUILD_SCRIPT_WITH_COMMANDS', value: [
                                    'ls -l',
                                    'cd opensearch-operator',
                                    [
                                        'bash',
                                        '../scripts/build-image-multi-arch.sh',
                                        "-v ${OPERATOR_VERSION}",
                                        "-a 'x64,arm,arm64'",
                                        "-f Dockerfile",
                                        "-p ${OPERATOR_PRODUCT}"
                                    ].join(' ')
                            ].join(' && ')),
                        ]
                    }
                    dockerPromotion: {
                        build job: 'docker-promotion',
                            parameters: [
                                string(name: 'SOURCE_IMAGES', value: '${OPERATOR_PRODUCT}:${OPERATOR_VERSION}'),
                                string(name: 'RELEASE_VERSION', value: "${OPERATOR_VERSION}"),
                                string(name: 'DOCKER_HUB_PROMOTE', value: true),
                                string(name: 'ECR_PROMOTE', value: true),
                                string(name: 'TAG_LATEST', value: true)
                            ]
                    }
                }
            }
            post {
                always {
                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                }
            }
        }
    }
}
